#!/bin/bash
# Job name
#PBS -N implicit
# Output files
#PBS -o ./implicit.o
#PBS -e ./implicit.e
# Queue name
#PBS -q short_cpuQ
# Set the maximum wall time
#PBS -l walltime=0:02:00
# Number of nodes, cpus, mpi processors and amount of memory
#PBS -l select=1:ncpus=1:mem=1gb

# Modules for C
module load gcc91
g++() {
    g++-9.1.0 "$@"
}
g++ --version
# Select the working directory
cd /home/luca.donatellis/MatrixTransposition

# The code should be compiled before submitting the job
g++ -o implicit implicit.cpp -fopenmp

# Run code
for P in {4..12}; do
    N=$((2**P))
    echo "Executing with n = $N"
    for I in {1..5}; do
        echo "#$I iteration"
        ./implicit $N
    done
done

g++ -o implicit implicit.cpp -fopenmp -O2

# Run code
for P in {4..12}; do
    N=$((2**P))
    echo "Executing with n = $N"
    for I in {1..5}; do
        echo "#$I iteration"
        ./implicit $N
    done
done
g++ -o implicit implicit.cpp -fopenmp -O2 -ftree-vectorize

# Run code
for P in {4..12}; do
    N=$((2**P))
    echo "Executing with n = $N"
    for I in {1..5}; do
        echo "#$I iteration"
        ./implicit $N
    done
done
g++ -o implicit implicit.cpp -fopenmp -O2 -march=native -ftree-vectorize

# Run code
for P in {4..12}; do
    N=$((2**P))
    echo "Executing with n = $N"
    for I in {1..5}; do
        echo "#$I iteration"
        ./implicit $N
    done
done
g++ -o implicit implicit.cpp -fopenmp -O2 -march=native -ftree-vectorize -fprefetch-loop-arrays -funroll-loops

# Run code
for P in {4..12}; do
    N=$((2**P))
    echo "Executing with n = $N"
    for I in {1..5}; do
        echo "#$I iteration"
        ./implicit $N
    done
done
g++ -o implicit implicit.cpp -fopenmp -O2 -march=native -ftree-vectorize -fprefetch-loop-arrays -funroll-loops -opt-prefetch-distance=8 -opt-streaming-stores -ffreestanding -fpeel-loops

# Run code
for P in {4..12}; do
    N=$((2**P))
    echo "Executing with n = $N"
    for I in {1..5}; do
        echo "#$I iteration"
        ./implicit $N
    done
done